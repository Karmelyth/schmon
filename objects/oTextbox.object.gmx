<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0;
cutoff = 0;
mod_cutoff = 0;
increment = 1;
text = "UNDEFINED";
addcontrol = 0;
 
done = false;

text_blend = c_white;
on_text_end = 0; // when this turns true text end event scrpits are executed
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>g.can_control -= addcontrol;
g.interaction = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _c = merge_colour(c_dkgray, c_black, .7);

draw_set_font(fTextbox);
var _char_width = 13,                          // fixed width of the font
    _line_end   = 72,                          // amount of chars per line
    _line  = 0,                                // current line of the string
    _space = 0,                                // current character
    _i = 1,
    _delay = 1,                                // delay before next character appears
    _modifier = 0,                             // the current "modifier" of the text (colour, offset, etc...)
    _text_blend = c_white,
    _xoffset = 0,
    _yoffset = 0,
    _string  = text,
    _ytop    = view_yview + view_hview * 2 / 3;

draw_set_alpha(.7);
draw_rectangle_colour(view_xview, view_yview + view_hview, view_xview + view_wview, _ytop - 15, _c, _c, _c, _c, false);    
draw_set_alpha(1);
  
// Typewriter effect:
if  timer &gt;= _delay{
    cutoff++;
    timer = 0;
}
else{timer++}


while _i &lt;= string_length(_string) &amp;&amp; _i &lt;= cutoff{     
    // check for modifiers
    if string_char_at(_string, _i) = "@"{
        _modifier = string_char_at(_string, ++_i);
        _i++;
        if clamp(cutoff - _i + 1, 0, 1) = 0 cutoff++; // this fixes wierd modifier reading lag
    }  
    
    // go to next line
    var _length = 0;
    while string_char_at(_string, _i) != " " &amp;&amp; string_char_at(_string, _i) != "@" &amp;&amp; string_char_at(_string, _i - 1) != "@" &amp;&amp; _i &lt;= string_length(_string){
        _i++;
        _length++;
    }
    if _space + _length &gt; _line_end{
        _space = 0;
        _line++;
    }
    _i -= _length;
        
    // determine what a modifier does
    switch _modifier{
        case "r": _text_blend = c_red   ; break;
        case "b": _text_blend = c_blue  ; break;
        case "g": _text_blend = c_lime  ; break;
        case "y": _text_blend = c_yellow; break;
        case "w": _text_blend = c_white ; break;
        case "l": _text_blend = c_ltgray; break;
        case "z": _text_blend = make_colour_hsv(current_time / 15, 225, 225);            // rainbow
                  break;
        case "#": _line++;                                                               // new line
                  _space = 0;
                  _modifier = 0;
                  break;
        case "0": _xoffset = 0;                                                          // reset coord offsets
                  _yoffset = 0;
                  break;
        case "1": _xoffset = random_range(-1, 1);                                        // shaky text
                  _yoffset = random_range(-1, 1);
                  break;
        case "2": _yoffset = sin(pi + _i / 3 + current_time / 80) * 2; break;            // wavy text
        case "3": if !irandom(1){                                                        // epic glitch effect
                    _yoffset = irandom_range(-5, 5);
                    _xoffset = irandom_range(-3, 3); 
                  }
                  break;
        case "4": _xoffset = random_range(-2, 2); _yoffset = random_range(-1, 1); break; // stronger shaky text  
        case "-": _text_blend = c_white;                                                 // reset EVERY modifier
                  _xoffset = 0;
                  _yoffset = 0;
                  break;
    }
    
    if keyboard_check_pressed(g.key_interact) || mouse_check_button_pressed(mb_left){
        if on_text_end &lt;= 0{// prevent skipping before scrolling
                _i = string_length(_string) - 1;// jump to end of string
                cutoff = _i;
                on_text_end = 35;
        }
    } 
    
    var _yf = 1, // first frame char y offset
        _xf = view_xview + 10 + _space * _char_width + _xoffset //- string_length(_string)/2 * _char_width;
            
    draw_text_colour_shadow(_xf, floor(_ytop + 27 * _line + _yoffset + clamp(cutoff - _i, 0, 1) * _yf - _yf), string_char_at(_string, _i), _text_blend, .75 + clamp(cutoff - _i, 0, 1) * .25);
    
    _space++;
    ++_i;
        
    // Execute text end scripts
    if _i &gt;= string_length(_string){
        on_text_end++;
        if on_text_end &gt;= 45{
            if keyboard_check_pressed(g.key_interact) || mouse_check_button_pressed(mb_left){
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
