<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setting up vars:
slots[0,0] = -4; //slots[team index, schmon index]
slots[1,0] = -4; //slots[team index, schmon index]

//Buttons:
button[0,0] = view_wview + 40;     //xpos
button[0,1] = view_hview * 2 - 65; //ypos
button[0,2] = "ATTACK";            //name
button[0,3] = 0;                   //state

button[1,0] = view_wview + 40;     
button[1,1] = view_hview * 2 - 38; 
button[1,2] = "SCHMONS";            
button[1,3] = 0;

button[2,0] = view_wview + 40;     
button[2,1] = view_hview * 2 - 11; 
button[2,2] = "ITEMS";            
button[2,3] = 0;                

button[3,0] = view_wview + 40;     
button[3,1] = view_hview * 2 + 16; 
button[3,2] = "ESCAPE";            
button[3,3] = 0;   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var _i = 0,
for(var _i = 0; _i &lt; m
slots[_i].barfill += speed;
if barfill &gt; barmax{barfill = barmax};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _pleft = 650, 
    _ypos  = view_hview * 2 - 70,
    _hpw   = 350,
    _hph   = 30,
    _chargebarh = 5,
    _cm = slots[0,0],
    _cmcanattack = true;
    
//improvised Shmon step event

if _cm.use_time-- &gt; 0{
    _cmcanattack = false;
    _cm.barfill -= _cm.use_time_attack / _cm.use_time_start; // deduct bars based on moves bar cost
    
}else{
    _cm.use_time        = 0;
    _cm.use_time_start  = 0;
    _cm.use_time_attack = 0;
    _cm.barfill += _cm.parent.base_speed
    if _cm.barfill &gt; _cm.barmax{_cm.barfill = _cm.barmax}
}

draw_set_font(fMedium);

//Your schmon:
if _cm &gt; -4{
    draw_text_shadow(_pleft, _ypos, _cm.name);
    draw_text_shadow(_pleft + _hpw - string_width("Lv." + string(_cm.level)), _ypos, "Lv." + string(_cm.level));
    _ypos += 20;
    
    //Sprite:
    draw_sprite_ext(_cm.spr_back, 0, view_wview - 250, view_hview * 2 - 80, 6, 6, 0, c_white, 1);
    
    //Health bar:
    draw_rectangle_colour(_pleft - 2, _ypos - 2       , _pleft + _hpw + 2                                  , _ypos + _hph + 2 , c_black, c_black, c_black, c_black, false);
    if _cm.current_health &gt; 0{
        draw_rectangle_colour(_pleft    , _ypos           , _pleft + _hpw * (_cm.current_health/_cm.max_health), _ypos + _hph     ,  c_lime,  c_lime,  c_lime,  c_lime, false);
    }
    draw_set_alpha(.45);
    draw_rectangle_colour(_pleft    , _ypos + _hph + 1, _pleft + _hpw * (_cm.current_health/_cm.max_health), _ypos + _hph * .7,  c_navy,  c_navy,  c_navy,  c_navy, false);
    draw_set_alpha(1);
    if dev = true{
        var _str_hp = string(round(_cm.current_health)) + "/" + string(round(_cm.max_health));
        draw_text_shadow(_pleft + _hpw / 2 - string_width(_str_hp) / 2, _ypos + _hph / 4, _str_hp)
    }
    _ypos += _hph + 10;
    
    //Action bars:
    for(var _i = 0, _xoff = 0; _i &lt; array_length_1d(_cm.action_bar); _i++){
        var _j = 0;
        if _i &gt; 0{_j = _cm.action_bar[_i - 1]}
        
        draw_rectangle_colour(_pleft + _xoff + _j / 10 - 2, _ypos - 2,  _pleft + _xoff + (_cm.action_bar[_i] - _j) / 10 + _j / 10 + 2, _ypos + _chargebarh + 2,  c_black,  c_black,  c_black,  c_black, false);
        if true{  
            var _bw = _cm.action_bar[_i] - _j,
                _co = c_orange;
                if _cm.barfill &gt;= _cm.action_bar[_i]
                {
                    if current_frame mod 17 = 0 || current_frame mod 18 = 0{
                        _co = c_white;
                    }else{_co = c_yellow}
                }
                if _cm.barfill &gt;= _j
                {
                    draw_rectangle_colour(_pleft + _xoff + _j / 10, _ypos, _pleft + _xoff + ((_cm.action_bar[_i] - _j) * clamp((_cm.barfill - _j)/ (_cm.action_bar[_i] - _j), 0, 1)) / 10 + _j / 10, _ypos + _chargebarh, _co, _co, _co, _co, false);
                }
        }
        _xoff += 10;
    }
    
    //Buttons:    
    if _cmcanattack = true{
        
        if button[0,3] = true{
            if keyboard_check_pressed(g.key_pause){
                button[0,3] = false;
            }   
        }  
        if button[1,3] = true{
            if keyboard_check_pressed(g.key_pause){
                button[1,3] = false;
            }   
        }
    
        button[0,3] = bm_button(button[0,0], button[0,1] - string_height(button[0,2]) / 2, button[0,0] + string_width(button[0,2]), button[0,1] + string_height(button[0,2]), button[0,3], button[0,2], 0)
        button[1,3] = bm_button(button[1,0], button[1,1] - string_height(button[1,2]) / 2, button[1,0] + string_width(button[1,2]), button[1,1] + string_height(button[1,2]), button[1,3], button[1,2], 1)
        button[2,3] = bm_button(button[2,0], button[2,1] - string_height(button[2,2]) / 2, button[2,0] + string_width(button[2,2]), button[2,1] + string_height(button[2,2]), button[2,3], button[2,2], 2)
        button[3,3] = bm_button(button[3,0], button[3,1] - string_height(button[3,2]) / 2, button[3,0] + string_width(button[3,2]), button[3,1] + string_height(button[3,2]), button[3,3], button[3,2], 3)
    
        //Your attacks
        if button[0, 3] = true{
            var _i = 0;
            repeat(array_length_1d(_cm.attacks)){
                var _x = button[0,0] - 130,
                    _y = button[0, 1] + 30 * _i - 10,
                    _s = attack_info(_cm.attacks[_i], "name"),
                    _c = c_ltgray,
                    _canuse = calculate_cost(_cm.attacks[_i], _cm); // if the attack can be executed
                    
                    if !_canuse{_c = c_dkgray}
                    
                    if point_in_rectangle(window_mouse_get_x(), window_mouse_get_y(), _x - string_width(_s)/2, _y - string_height(_s)/2, _x + string_width(_s), _y + string_height(_s)) = true{
                        if _c = c_dkgray _c = c_gray else _c = c_white   
                        if mouse_check_button_pressed(mb_left) = true &amp;&amp; _canuse &gt; -1 &amp;&amp; _cmcanattack = true{
                            attack_execute(_cm.attacks[_i], _cm, slots[1,0]);
                        }
                    }
                    
                draw_text_colour_shadow(_x, _y, _s, _c, 1);
                _i++;
            }
        }
    }
}

_cm = slots[1,0]
_ypos = view_yview + 20


_cm.barfill += _cm.parent.base_speed
if _cm.barfill &gt; _cm.barmax{_cm.barfill = _cm.barmax}

//The enemy
if _cm &gt; -4{

    draw_text_shadow(_pleft, _ypos, _cm.name);
    draw_text_shadow(_pleft + _hpw - string_width("Lv." + string(_cm.level)), _ypos, "Lv." + string(_cm.level));
    _ypos += 20;

    draw_rectangle_colour(_pleft - 2, _ypos - 2       , _pleft + _hpw + 2                                  , _ypos + _hph + 2 , c_black, c_black, c_black, c_black, false);
    if _cm.current_health &gt; 0{    
        draw_rectangle_colour(_pleft    , _ypos           , _pleft + _hpw * (_cm.current_health/_cm.max_health), _ypos + _hph     ,  c_lime,  c_lime,  c_lime,  c_lime, false);
    }
    draw_set_alpha(.45);
    draw_rectangle_colour(_pleft    , _ypos + _hph + 1, _pleft + _hpw * (_cm.current_health/_cm.max_health), _ypos + _hph * .7,  c_navy,  c_navy,  c_navy,  c_navy, false);
    draw_set_alpha(1);
    if dev = true{
        var _str_hp = string(round(_cm.current_health)) + "/" + string(round(_cm.max_health));
        draw_text_shadow(_pleft + _hpw / 2 - string_width(_str_hp) / 2, _ypos + _hph / 4, _str_hp)
    }
    _ypos += _hph + 10;
    
    //Action bars:
    for(var _i = 0, _xoff = 0; _i &lt; array_length_1d(_cm.action_bar); _i++){
        var _j = 0;
        if _i &gt; 0{_j = _cm.action_bar[_i - 1]}
        
        draw_rectangle_colour(_pleft + _xoff + _j / 10 - 2, _ypos - 2,  _pleft + _xoff + (_cm.action_bar[_i] - _j) / 10 + _j / 10 + 2, _ypos + _chargebarh + 2,  c_black,  c_black,  c_black,  c_black, false);
        if true{  
            var _bw = _cm.action_bar[_i] - _j,
                _co = c_orange;
                if _cm.barfill &gt;= _cm.action_bar[_i]
                {
                    if current_frame mod 17 = 0 || current_frame mod 18 = 0{
                        _co = c_white;
                    }else{_co = c_yellow}
                }
                if _cm.barfill &gt;= _j
                {
                    draw_rectangle_colour(_pleft + _xoff + _j / 10, _ypos, _pleft + _xoff + ((_cm.action_bar[_i] - _j) * clamp((_cm.barfill - _j)/ (_cm.action_bar[_i] - _j), 0, 1)) / 10 + _j / 10, _ypos + _chargebarh, _co, _co, _co, _co, false);
                }
        }
        _xoff += 10;
    }
}

draw_text_shadow(10, 100, string(round(slots[0,0].barfill)))
draw_text_shadow(10, 120, string(slots[1,0]))
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
